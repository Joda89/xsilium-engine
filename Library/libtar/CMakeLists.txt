project(libtar)
 
# Include all the necessary files for macros
INCLUDE (CheckIncludeFiles)
INCLUDE (CheckFunctionExists)
INCLUDE (CheckTypeSize)
INCLUDE (CheckSymbolExists)
INCLUDE (TestBigEndian)


CHECK_FUNCTION_EXISTS(basename HAVE_BASENAME)
CHECK_FUNCTION_EXISTS(dirname HAVE_DIRNAME)
CHECK_FUNCTION_EXISTS(fnmatch HAVE_FNMATCH)
CHECK_FUNCTION_EXISTS(lchown HAVE_LCHOWN)
CHECK_FUNCTION_EXISTS(snprintf HAVE_SNPRINTF)
CHECK_FUNCTION_EXISTS(strlcpy HAVE_STRLCPY)
CHECK_FUNCTION_EXISTS(strmode HAVE_STRMODE)
CHECK_FUNCTION_EXISTS(strsep HAVE_STRSEP)
CHECK_FUNCTION_EXISTS(strdup HAVE_STRDUP)
CHECK_FUNCTION_EXISTS(strftime HAVE_STRFTIME)
CHECK_FUNCTION_EXISTS(vsnprintf HAVE_VSNPRINTF)
CHECK_FUNCTION_EXISTS(glob HAVE_GLOB)
CHECK_FUNCTION_EXISTS(major HAVE_MAJOR)
CHECK_FUNCTION_EXISTS(minor HAVE_MINOR)
CHECK_FUNCTION_EXISTS(makedev HAVE_MAKEDEV)


#check for stdc headers

CHECK_INCLUDE_FILES("stdlib.h;stdarg.h;string.h;float.h" STDC_HEADERS)


# on Syllable lchown() is there, but always returns "Not implemented"
IF("${CMAKE_SYSTEM_NAME}" MATCHES syllable)
  SET(HAVE_LCHOWN 0)
ENDIF("${CMAKE_SYSTEM_NAME}" MATCHES syllable)

CHECK_TYPE_SIZE("dev_t" SIZEOF_DEV_T)
IF(HAVE_SIZEOF_DEV_T)
  SET (HAVE_DEV_T 1)
ELSE(HAVE_SIZEOF_DEV_T)
  SET (HAVE_DEV_T 0)
  SET (dev_t "unsigned long")
ENDIF(HAVE_SIZEOF_DEV_T)

CHECK_TYPE_SIZE("major_t" SIZEOF_MAJOR_T)
IF(HAVE_SIZEOF_MAJOR_T)
  SET (HAVE_MAJOR_T 1)
ELSE(HAVE_SIZEOF_MAJOR_T)
  SET (HAVE_MAJOR_T 0)
  SET (major_t "unsigned int")
ENDIF(HAVE_SIZEOF_MAJOR_T)

CHECK_TYPE_SIZE("minor_t" SIZEOF_MINOR_T)
IF(HAVE_SIZEOF_MINOR_T)
  SET (HAVE_MINOR_T 1)
ELSE(HAVE_SIZEOF_MINOR_T)
  SET (HAVE_MINOR_T 0)
  SET (minor_t "unsigned int")
ENDIF(HAVE_SIZEOF_MINOR_T)

CHECK_TYPE_SIZE("nlink_t" SIZEOF_NLINK_T)
IF(HAVE_SIZEOF_NLINK_T)
  SET (HAVE_NLINK_T 1)
ELSE(HAVE_SIZEOF_NLINK_T)
  SET (HAVE_NLINK_T 0)
  SET (nlink_t "unsigned short")
ENDIF(HAVE_SIZEOF_NLINK_T)

CHECK_TYPE_SIZE("uint64_t" SIZEOF_UINT64_T)
IF(HAVE_SIZEOF_UINT64_T)
  SET (HAVE_UINT64_T 1)
ELSE(HAVE_SIZEOF_UINT64_T)
  SET (HAVE_UINT64_T 0)
  SET (uint64_t "long long")
ENDIF(HAVE_SIZEOF_UINT64_T)

CHECK_TYPE_SIZE("gid_t" SIZEOF_GID_T)
IF(HAVE_SIZEOF_GID_T)
  SET (HAVE_GID_T 1)
ELSE(HAVE_SIZEOF_GID_T)
  SET (HAVE_GID_T 0)
  SET (gid_t "int")
ENDIF(HAVE_SIZEOF_GID_T)

CHECK_TYPE_SIZE("mode_t" SIZEOF_MODE_T)
IF(HAVE_SIZEOF_MODE_T)
  SET (HAVE_MODE_T 1)
ELSE(HAVE_SIZEOF_MODE_T)
  SET (HAVE_MODE_T 0)
  SET (mode_t "int")
ENDIF(HAVE_SIZEOF_MODE_T)

CHECK_TYPE_SIZE("off_t" SIZEOF_OFF_T)
IF(HAVE_SIZEOF_OFF_T)
  SET (HAVE_OFF_T 1)
ELSE(HAVE_SIZEOF_OFF_T)
  SET (HAVE_OFF_T 0)
  SET (off_t "long")
ENDIF(HAVE_SIZEOF_OFF_T)
CHECK_TYPE_SIZE("size_t" SIZEOF_SIZE_T)
IF(HAVE_SIZEOF_SIZE_T)
  SET (HAVE_SIZE_T 1)
ELSE(HAVE_SIZEOF_SIZE_T)
  SET (HAVE_SIZE_T 0)
  SET (size_t "unsigned")
ENDIF(HAVE_SIZEOF_SIZE_T)

CHECK_TYPE_SIZE("ssize_t" SIZEOF_SSIZE_T)
IF(HAVE_SIZEOF_SSIZE_T)
  SET (HAVE_SSIZE_T 1)
ELSE(HAVE_SIZEOF_SSIZE_T)
  SET (HAVE_SSIZE_T 0)
  CHECK_TYPE_SIZE("long"  SIZEOF_LONG)
  CHECK_TYPE_SIZE("__int64"  SIZEOF___INT64)
  IF(SIZEOF_LONG EQUAL SIZEOF_SIZE_T)
    SET(ssize_t "long")
  ENDIF(SIZEOF_LONG EQUAL SIZEOF_SIZE_T)
  IF(NOT ssize_t AND SIZEOF___INT64 EQUAL SIZEOF_SIZE_T)
    SET(ssize_t "__int64")
  ENDIF(NOT ssize_t AND SIZEOF___INT64 EQUAL SIZEOF_SIZE_T)
ENDIF(HAVE_SIZEOF_SSIZE_T)

CHECK_TYPE_SIZE("uid_t" SIZEOF_UID_T)
IF(HAVE_SIZEOF_UID_T)
  SET (HAVE_UID_T 1)
ELSE(HAVE_SIZEOF_UID_T)
  SET (HAVE_UID_T 0)
  SET (uid_t "int")
ENDIF(HAVE_SIZEOF_UID_T)

SET (HAVE_CTYPE_H 1) # all our platforms have <ctype.h>
SET (HAVE_LIBZ 1)
SET (MAJOR_IN_MKDEV 0)
SET (MAJOR_IN_SYSMACROS 0)

# for most systems makedev is two args on qnx it is three
# try run is nothing but trouble so just hard code it 
SET (MAKEDEV_THREE_ARGS 0)
IF(QNXNTO)
  SET(MAKEDEV_THREE_ARGS 1)
ENDIF(QNXNTO)
IF(UNIX)
  SET (NEED_MAKEDEV 1)
ENDIF(UNIX)
SET (PACKAGE_BUGREPORT "")
SET (PACKAGE_NAME "\"libtar\"")
SET (PACKAGE_STRING "\"libtar 1.2.11\"")
SET (PACKAGE_TARNAME "\"libtar\"")
SET (PACKAGE_VERSION "\"1.2.11\"")
SET (const 0)
SET (LISTHASH_PREFIX "libtar")
SET (HAVE_UNISTD_H 1)

IF(NOT HAVE_FNMATCH)
SET(NEED_FNMATCH 1)
ENDIF(NOT HAVE_FNMATCH)




CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/template/listhash.h.in
  ${CMAKE_CURRENT_SOURCE_DIR}/include/libtar_listhash.h)


CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/template/list.c.in
  ${CMAKE_CURRENT_SOURCE_DIR}/src/libtar_list.c )


CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/template/hash.c.in
 ${CMAKE_CURRENT_SOURCE_DIR}/src/libtar_hash.c )

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/template/config.h.in
 ${CMAKE_CURRENT_SOURCE_DIR}/include/config.h)




file(GLOB_RECURSE libtar_SOURCES_C src/*.c )
file(GLOB_RECURSE libtar_SOURCES_H include/*.h )

set(libtar_SOURCES
    ${libtar_SOURCES_C}
    ${libtar_SOURCES_H}
)

include_directories(include)

add_library(tar STATIC ${libtar_SOURCES})

set(LIBTAR_INCLUDE_DIR "${libtar_SOURCES_H}" CACHE PATH "" FORCE)
set(LIBTAR_LIBRARY_DBG "tar" CACHE STRING "" FORCE)
set(LIBTAR_LIBRARY_REL "tar" CACHE STRING "" FORCE)
mark_as_advanced(LIBTAR_INCLUDE_DIR LIBTAR_LIBRARY_DBG LIBTAR_LIBRARY_REL)
